// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Roles {
    USER
    ADMIN
}

enum BabyfootStatus {
    AVAILABLE
    OCCUPIED
    MAINTENANCE
}

enum TableCondition {
    EXCELLENT
    BON
    MOYEN
    MAINTENANCE
}

enum ReservationStatus {
    PENDING
    CONFIRMED
    IN_PROGRESS
    FINISHED
    CANCELLED
    EXPIRED
}

enum BallType {
    STANDARD
    PRO
    COMPETITION
}

enum MatchResult {
    WIN
    LOSS
    DRAW
}

enum MatchFormat {
    ONE_VS_ONE
    ONE_VS_TWO
    TWO_VS_TWO
}

model User {
    id            String    @id
    name          String
    email         String    @unique
    emailVerified Boolean
    image         String?
    createdAt     DateTime  @default(now()) @db.Timestamp(6)
    updatedAt     DateTime? @db.Timestamp(6)
    deletedAt     DateTime? @db.Timestamp(6)
    created_at    DateTime  @default(now()) @db.Timestamp(6)
    updated_at    DateTime? @db.Timestamp(6)
    deleted_at    DateTime? @db.Timestamp(6)
    role          Roles     @default(USER)
    accounts      Account[]
    sessions      Session[]

    // Game relations
    reservationsAsReferee     Reservation[] @relation("Referee")
    reservationsAsRedDefense  Reservation[] @relation("RedDefense")
    reservationsAsRedAttack   Reservation[] @relation("RedAttack")
    reservationsAsBlueDefense Reservation[] @relation("BlueDefense")
    reservationsAsBlueAttack  Reservation[] @relation("BlueAttack")
    queue                     QueueEntry[]

    @@map("user")
}

model Session {
    id        String    @id
    expiresAt DateTime
    token     String    @unique
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.Timestamp(6)
    deletedAt DateTime? @db.Timestamp(6)
    ipAddress String?
    userAgent String?
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now()) @db.Timestamp(6)
    updatedAt             DateTime? @db.Timestamp(6)
    deletedAt             DateTime? @db.Timestamp(6)
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime  @default(now()) @db.Timestamp(6)
    updatedAt  DateTime? @db.Timestamp(6)
    deletedAt  DateTime? @db.Timestamp(6)

    @@map("verification")
}

model Babyfoot {
    id           Int             @id @default(autoincrement())
    name         String
    status       BabyfootStatus  @default(AVAILABLE)
    location     String?
    condition    TableCondition?
    reservations Reservation[]
    queue        QueueEntry[]

    @@map("babyfoot")
}

model Reservation {
    id             Int               @id @default(autoincrement())
    babyfootId     Int               @map("babyfoot_id")
    createdAt      DateTime          @default(now()) @map("created_at")
    partyDate      DateTime          @map("party_date")
    extended       Boolean           @default(false)
    status         ReservationStatus @default(CONFIRMED)
    tableCondition TableCondition?   @map("table_condition")
    ballType       BallType?         @map("ball_type")
    refereeId      String?           @map("referee_id")
    gameDuration   DateTime?         @map("game_duration") @db.Time
    finalScoreRed  Int?              @map("final_score_red")
    finalScoreBlue Int?              @map("final_score_blue")
    result         MatchResult?
    redDefenseId   String?           @map("red_defense_id")
    redAttackId    String?           @map("red_attack_id")
    blueAttackId   String?           @map("blue_attack_id")
    blueDefenseId  String?           @map("blue_defense_id")
    format         MatchFormat?

    babyfoot    Babyfoot @relation(fields: [babyfootId], references: [id], onDelete: Cascade)
    referee     User?    @relation("Referee", fields: [refereeId], references: [id])
    redDefense  User?    @relation("RedDefense", fields: [redDefenseId], references: [id])
    redAttack   User?    @relation("RedAttack", fields: [redAttackId], references: [id])
    blueDefense User?    @relation("BlueDefense", fields: [blueDefenseId], references: [id])
    blueAttack  User?    @relation("BlueAttack", fields: [blueAttackId], references: [id])

    @@index([babyfootId])
    @@index([partyDate])
    @@index([status])
    @@index([refereeId])
    @@index([redDefenseId])
    @@index([redAttackId])
    @@index([blueDefenseId])
    @@index([blueAttackId])
    @@map("reservation")
}

model QueueEntry {
    id         Int       @id @default(autoincrement())
    userId     String    @map("user_id")
    babyfootId Int       @map("babyfoot_id")
    notifiedAt DateTime? @map("notified_at")
    expiredAt  DateTime? @map("expired_at")
    createdAt  DateTime  @default(now()) @map("created_at")

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    babyfoot Babyfoot @relation(fields: [babyfootId], references: [id], onDelete: Cascade)

    @@index([babyfootId, createdAt])
    @@index([userId])
    @@map("queueentry")
}
