// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ==================== Player (User) Model ====================

model Player {
    id         String   @id @default(cuid())
    clerkId    String?  @unique // Optional pour permettre import du dataset
    email      String   @unique
    surname    String?
    name       String
    username   String?  @unique
    profilePic String?  @map("profile_pic")
    elo        Float    @default(1000)
    wins       Int      @default(0)
    losses     Int      @default(0)
    role       Role     @default(USER)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    partiesAsRedDefense  Party[]      @relation("RedDefense")
    partiesAsRedAttack   Party[]      @relation("RedAttack")
    partiesAsBlueDefense Party[]      @relation("BlueDefense")
    partiesAsBlueAttack  Party[]      @relation("BlueAttack")
    partiesAsReferee     Party[]      @relation("Referee")
    queue                QueueEntry[]

    @@index([elo])
    @@index([clerkId])
    @@index([username])
    @@map("player")
}

enum Role {
    USER
    ADMIN
}

// ==================== Table Condition Model ====================

model TableCondition {
    id          String   @id @default(cuid())
    description String
    createdAt   DateTime @default(now())

    // Relations
    tables  Table[]
    parties Party[]

    @@map("table_condition")
}

// ==================== Table (Babyfoot) Model ====================

model Table {
    id          String   @id @default(cuid())
    name        String   @unique
    location    String?
    conditionId String   @map("condition_id")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    condition TableCondition @relation(fields: [conditionId], references: [id])
    parties   Party[]
    queue     QueueEntry[]

    @@index([conditionId])
    @@map("tables")
}

// ==================== Ball Type Model ====================

model BallType {
    id          String   @id @default(cuid())
    description String
    createdAt   DateTime @default(now())

    // Relations
    parties Party[]

    @@map("balls")
}

// ==================== Result Model ====================

model Result {
    id        String   @id @default(cuid())
    text      String   @unique
    createdAt DateTime @default(now())

    // Relations
    parties Party[]

    @@map("result")
}

// ==================== Party (Match) Model ====================

model Party {
    id               String   @id @default(cuid())
    tableId          String   @map("table_id")
    partyDate        DateTime @map("party_date")
    tableConditionId String   @map("table_condition_id")
    ballTypeId       String   @map("ball_type_id")
    refereeId        String?  @map("referee_id")
    gameDuration     Int?     @map("game_duration") // en minutes
    finalScoreRed    Int      @map("final_score_red")
    finalScoreBlue   Int      @map("final_score_blue")
    resultId         String   @map("result_id")
    redDefenseId     String   @map("red_defense_id")
    redAttackId      String   @map("red_attack_id")
    blueDefenseId    String   @map("blue_defense_id")
    blueAttackId     String   @map("blue_attack_id")
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @updatedAt

    // Relations
    table          Table          @relation(fields: [tableId], references: [id])
    tableCondition TableCondition @relation(fields: [tableConditionId], references: [id])
    ballType       BallType       @relation(fields: [ballTypeId], references: [id])
    result         Result         @relation(fields: [resultId], references: [id])
    referee        Player?        @relation("Referee", fields: [refereeId], references: [id])
    redDefense     Player         @relation("RedDefense", fields: [redDefenseId], references: [id])
    redAttack      Player         @relation("RedAttack", fields: [redAttackId], references: [id])
    blueDefense    Player         @relation("BlueDefense", fields: [blueDefenseId], references: [id])
    blueAttack     Player         @relation("BlueAttack", fields: [blueAttackId], references: [id])

    @@index([tableId])
    @@index([partyDate])
    @@index([resultId])
    @@index([redDefenseId])
    @@index([redAttackId])
    @@index([blueDefenseId])
    @@index([blueAttackId])
    @@index([refereeId])
    @@map("party")
}

// ==================== Queue Model (pour r√©servations futures) ====================

model QueueEntry {
    id         String    @id @default(cuid())
    playerId   String    @map("player_id")
    tableId    String    @map("table_id")
    notifiedAt DateTime? @map("notified_at")
    expiredAt  DateTime? @map("expired_at")
    createdAt  DateTime  @default(now()) @map("created_at")

    player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
    table  Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@index([tableId, createdAt])
    @@index([playerId])
    @@map("queue_entry")
}
